name: EcommerceApp - Create Tag, Release NuGet, and Create GitHub Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_CSPROJ_PATH: EcommerceApp/EcommerceApp.Api/EcommerceApp.Api.csproj
  PACKAGE_ID: EcommerceApp.Api
  # TARGET_FRAMEWORK: net8.0 # Ya no es estrictamente necesario para la ruta del nupkg si está en bin/Release

jobs:
  build-tag-release:
    name: Build, Tag, Publish, and Release
    
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Debug - Verify Project Paths Before Restore
      run: |
        echo "Verificando PROJECT_CSPROJ_PATH: ${{ env.PROJECT_CSPROJ_PATH }}"
        if [ ! -f "${{ env.PROJECT_CSPROJ_PATH }}" ]; then
          echo "ERROR: PROJECT_CSPROJ_PATH (${{ env.PROJECT_CSPROJ_PATH }}) no encontrado."
          ls -lA $(dirname "${{ env.PROJECT_CSPROJ_PATH }}") || echo "No se pudo listar el directorio de PROJECT_CSPROJ_PATH"
          exit 1
        fi
        echo "PROJECT_CSPROJ_PATH encontrado."

    - name: Get Version from .csproj and Determine Tag
      id: version_tag_logic
      run: |
        BASE_VERSION_FROM_CSPROJ=$(grep -oP '(?<=<Version>).*(?=</Version>)' ${{ env.PROJECT_CSPROJ_PATH }} | head -n 1)
        if [ -z "$BASE_VERSION_FROM_CSPROJ" ]; then
          echo "Error: No se pudo extraer la versión del archivo ${{ env.PROJECT_CSPROJ_PATH }}"
          exit 1
        fi
        echo "Versión base del .csproj: $BASE_VERSION_FROM_CSPROJ"

        CURRENT_VERSION_FOR_TAGGING=$BASE_VERSION_FROM_CSPROJ
        TAG_PREFIX="v"
        PROPOSED_TAG="${TAG_PREFIX}${CURRENT_VERSION_FOR_TAGGING}"

        MAX_ATTEMPTS=20
        ATTEMPT_COUNT=0
        FINAL_TAG_TO_CREATE=$PROPOSED_TAG
        FINAL_VERSION_FOR_RELEASE=$CURRENT_VERSION_FOR_TAGGING

        git fetch --tags --force 
        
        while git rev-parse "refs/tags/$FINAL_TAG_TO_CREATE" >/dev/null 2>&1 || git ls-remote --tags origin "refs/tags/$FINAL_TAG_TO_CREATE" | grep -q "refs/tags/$FINAL_TAG_TO_CREATE"; do
          echo "El tag $FINAL_TAG_TO_CREATE ya existe localmente o en el remoto. Incrementando versión patch."
          ATTEMPT_COUNT=$((ATTEMPT_COUNT + 1))
          if [ "$ATTEMPT_COUNT" -gt "$MAX_ATTEMPTS" ]; then
            echo "Error: Se superó el número máximo de intentos para encontrar un tag único."
            exit 1
          fi
          FINAL_VERSION_FOR_RELEASE=$(echo $FINAL_VERSION_FOR_RELEASE | awk -F. -v OFS=. '{$NF = $NF + 1 ; print}')
          FINAL_TAG_TO_CREATE="${TAG_PREFIX}${FINAL_VERSION_FOR_RELEASE}"
          echo "Nuevo intento de tag: $FINAL_TAG_TO_CREATE con versión: $FINAL_VERSION_FOR_RELEASE"
        done
        
        echo "Tag final a crear: $FINAL_TAG_TO_CREATE"
        echo "Versión final para la release y paquete: $FINAL_VERSION_FOR_RELEASE"

        echo "PACKAGE_VERSION=$FINAL_VERSION_FOR_RELEASE" >> $GITHUB_ENV
        echo "FINAL_TAG_NAME=$FINAL_TAG_TO_CREATE" >> $GITHUB_ENV
        echo "BASE_VERSION=$BASE_VERSION_FROM_CSPROJ" >> $GITHUB_ENV
      
    - name: Update version in .csproj if incremented
      if: env.PACKAGE_VERSION != env.BASE_VERSION
      run: |
        echo "La versión fue incrementada de ${{ env.BASE_VERSION }} a ${{ env.PACKAGE_VERSION }}. Actualizando .csproj..."
        sed -i.bak "s|<Version>.*</Version>|<Version>${{ env.PACKAGE_VERSION }}</Version>|" ${{ env.PROJECT_CSPROJ_PATH }}
        rm ${{ env.PROJECT_CSPROJ_PATH }}.bak
        echo "Contenido de <Version> en .csproj después de sed:"
        grep "<Version>" ${{ env.PROJECT_CSPROJ_PATH }}
      
    - name: Create and Push Git Tag
      run: |
        echo "Creando y empujando el tag: ${{ env.FINAL_TAG_NAME }}"
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        git tag "${{ env.FINAL_TAG_NAME }}"
        git push origin "${{ env.FINAL_TAG_NAME }}"

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_CSPROJ_PATH }}

    - name: Build the project
      run: dotnet build ${{ env.PROJECT_CSPROJ_PATH }} --configuration Release --no-restore

    - name: Create NuGet Package
      run: |
        echo "Empaquetando ${{ env.PROJECT_NAME }} con versión: ${{ env.PACKAGE_VERSION }}"
        if [ ! -f "${{ env.PROJECT_CSPROJ_PATH }}" ]; then
          echo "ERROR CRÍTICO: El archivo .csproj en ${{ env.PROJECT_CSPROJ_PATH }} no existe. No se puede empaquetar."
          exit 1
        fi
        dotnet pack ${{ env.PROJECT_CSPROJ_PATH }} \
          -c Release # Eliminado --no-build

    - name: Determine NuGet Package Path
      id: nuget_paths
      run: |
        PROJECT_DIR=$(dirname "${{ env.PROJECT_CSPROJ_PATH }}")
        # AJUSTADO: Buscamos el .nupkg directamente en bin/Release/
        NUGET_FILE_FULL_PATH="$PROJECT_DIR/bin/Release/${{ env.PACKAGE_ID }}.${{ env.PACKAGE_VERSION }}.nupkg"
        echo "NUGET_FILE_FOR_UPLOAD=$NUGET_FILE_FULL_PATH" >> $GITHUB_ENV
        echo "Ruta del paquete NuGet determinada: $NUGET_FILE_FULL_PATH"

    - name: Debug - Verify NuGet Package Location and Content
      run: |
        EXPECTED_NUPKG_FILE="${{ env.NUGET_FILE_FOR_UPLOAD }}"

        echo "Verificando archivo nupkg específico: $EXPECTED_NUPKG_FILE"
        if [ -f "$EXPECTED_NUPKG_FILE" ]; then
            echo "OK: Archivo NUPKG '$EXPECTED_NUPKG_FILE' ENCONTRADO."
            NUPKG_CONTAINING_DIR=$(dirname "$EXPECTED_NUPKG_FILE")
            echo "Contenido de '$NUPKG_CONTAINING_DIR':"
            ls -lA "$NUPKG_CONTAINING_DIR"
        else
            echo "ERROR: Archivo NUPKG '$EXPECTED_NUPKG_FILE' NO ENCONTRADO."
            PROJECT_DIR_BASE=$(dirname "${{ env.PROJECT_CSPROJ_PATH }}")
            echo "Intentando listar directorios relevantes para depuración:"
            echo "Listando contenido de $PROJECT_DIR_BASE/bin/Release/ :"
            ls -lA "$PROJECT_DIR_BASE/bin/Release/" || echo "No se pudo listar $PROJECT_DIR_BASE/bin/Release/"
            # Ya no necesitamos listar la subcarpeta del TFM si el paquete no está allí
            exit 1
        fi

    - name: Setup NuGet Source for GitHub Packages
      run: |
        dotnet nuget add source --username ${{ github.actor }} \
          --password ${{ secrets.GIT_TOKEN }} \
          --store-password-in-clear-text \
          --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

    - name: Publish NuGet Package to GitHub Packages
      run: |
        NUGET_FILE_PATH="${{ env.NUGET_FILE_FOR_UPLOAD }}" # Esta variable ahora tiene la ruta correcta

        echo "Intentando publicar: $NUGET_FILE_PATH"
        if [ ! -f "$NUGET_FILE_PATH" ]; then
            echo "ERROR CRÍTICO ANTES DE PUSH: El archivo '$NUGET_FILE_PATH' no existe."
            exit 1
        fi
        
        dotnet nuget push "$NUGET_FILE_PATH" \
          --api-key ${{ secrets.GIT_TOKEN }} \
          --source "github" \
          --skip-duplicate

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.FINAL_TAG_NAME }}
        name: "Release ${{ env.FINAL_TAG_NAME }}"
        body: |
          Release del paquete ${{ env.PROJECT_NAME }} versión ${{ env.PACKAGE_VERSION }}.
          Contiene el archivo NuGet generado.
        artifacts: ${{ env.NUGET_FILE_FOR_UPLOAD }} # Esta variable ahora tiene la ruta correcta
        token: ${{ secrets.GIT_TOKEN }}
        allowUpdates: true